name: SyncStock Daily Sync

on:
  # Run daily at 10 PM EST (3 AM UTC next day)
  schedule:
    - cron: '0 3 * * *'
  
  # Allow manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Optional start date (YYYY-MM-DD) for manual sync'
        required: false
        type: string

      force_refresh:
        description: 'Force refresh from specific date'
        required: false
        type: boolean
        default: false
  
  # Allow external webhooks to trigger the workflow
  repository_dispatch:
    types: [syncstock-sync]

jobs:
  sync:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment
      run: |
        echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
        echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
        echo "DB_USER=${{ vars.DB_USER }}" >> .env
        echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "LOOKBACK_DAYS=${{ vars.LOOKBACK_DAYS || '7' }}" >> .env
    
    - name: Run SyncStock
      run: |
        # Handle repository_dispatch webhook payload
        if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
          if [ -n "${{ github.event.client_payload.start_date }}" ]; then
            if [ "${{ github.event.client_payload.force_refresh }}" == "true" ]; then
              echo "Webhook: Running force refresh from date: ${{ github.event.client_payload.start_date }}"
              python syncstock.py "${{ github.event.client_payload.start_date }}"
            else
              echo "Webhook: Running sync with start date: ${{ github.event.client_payload.start_date }}"
              python syncstock.py '{"start_date": "${{ github.event.client_payload.start_date }}"}'
            fi
          else
            echo "Webhook: Running default sync (no start date specified)"
            python syncstock.py
          fi
        # Handle manual workflow_dispatch
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          if [ -n "${{ github.event.inputs.start_date }}" ]; then
            if [ "${{ github.event.inputs.force_refresh }}" == "true" ]; then
              echo "Manual: Running force refresh from date: ${{ github.event.inputs.start_date }}"
              python syncstock.py "${{ github.event.inputs.start_date }}"
            else
              echo "Manual: Running sync with start date: ${{ github.event.inputs.start_date }}"
              python syncstock.py '{"start_date": "${{ github.event.inputs.start_date }}"}'
            fi
          else
            echo "Manual: Running default sync with LOOKBACK_DAYS=${{ vars.LOOKBACK_DAYS || '7' }}"
            python syncstock.py
          fi
        else
          echo "Running default sync (resume from watermark or configurable lookback)"
          python syncstock.py
        fi
    
    - name: Check sync status
      run: |
        python -c "
        from db import conn_cursor
        with conn_cursor() as (conn, cur):
            cur.execute('SELECT last_sales_day_done, run_status FROM syncstock.meta WHERE id = TRUE')
            meta = cur.fetchone()
            print(f'âœ… Sync completed - Last processed day: {meta[\"last_sales_day_done\"]}, Status: {meta[\"run_status\"]}')
        "
